---
// Scroll to top button component
---

<button
  id="scroll-to-top"
  class="scroll-to-top"
  aria-label="Scroll to top"
  title="Scroll to top"
  style="display: none;"
>
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M18 15l-6-6-6 6"/>
  </svg>
</button>

<style>
  .scroll-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: var(--color-accent);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1000;
    opacity: 0;
    transform: translateY(20px);
  }

  .scroll-to-top.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .scroll-to-top:hover {
    background: var(--color-button-primary);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
  }

  .scroll-to-top:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .scroll-to-top:active {
    transform: translateY(0);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .scroll-to-top {
      transition: none;
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .scroll-to-top {
      bottom: 1rem;
      right: 1rem;
      width: 40px;
      height: 40px;
    }
  }
</style>

<script>
  class ScrollToTop {
    private button: HTMLElement | null;
    private scrollThreshold = 300;

    constructor() {
      this.button = document.getElementById('scroll-to-top');
      this.init();
    }

    private init(): void {
      if (!this.button) return;

      // Show/hide button based on scroll position
      window.addEventListener('scroll', () => {
        this.toggleVisibility();
      });

      // Smooth scroll to top on click
      this.button.addEventListener('click', () => {
        this.scrollToTop();
      });

      // Handle keyboard navigation
      this.button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.scrollToTop();
        }
      });
    }

    private toggleVisibility(): void {
      if (!this.button) return;

      const isVisible = window.scrollY > this.scrollThreshold;
      
      if (isVisible) {
        this.button.classList.add('visible');
        this.button.style.display = 'flex';
      } else {
        this.button.classList.remove('visible');
        setTimeout(() => {
          if (window.scrollY <= this.scrollThreshold) {
            this.button!.style.display = 'none';
          }
        }, 300);
      }
    }

    private scrollToTop(): void {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ScrollToTop();
  });
</script>
