---
// Theme toggle component
---

<button
  id="theme-toggle"
  class="theme-toggle-btn"
  aria-label="Toggle dark/light mode"
  title="Toggle dark/light mode"
>
  <svg
    class="sun-icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg
    class="moon-icon"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<style>
  .theme-toggle-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 8px;
    color: var(--color-text-base);
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-toggle-btn:hover {
    background: var(--color-card);
    transform: scale(1.05);
  }

  .theme-toggle-btn:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .sun-icon,
  .moon-icon {
    transition: all 0.3s ease;
  }

  .moon-icon {
    display: none;
  }

  [data-theme="light"] .sun-icon {
    display: none;
  }

  [data-theme="light"] .moon-icon {
    display: block;
  }
</style>

<script>
  class ThemeToggle {
    private button: HTMLElement | null;
    private currentTheme: string;

    constructor() {
      this.button = document.getElementById('theme-toggle');
      this.currentTheme = this.getStoredTheme() || this.getSystemTheme();
      this.init();
    }

    getStoredTheme(): string | null {
      return localStorage.getItem('theme');
    }

    getSystemTheme(): string {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    setTheme(theme: string): void {
      document.documentElement.setAttribute('data-theme', theme);
      localStorage.setItem('theme', theme);
      this.currentTheme = theme;
    }

    toggleTheme(): void {
      const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
      this.setTheme(newTheme);
    }

    init(): void {
      this.setTheme(this.currentTheme);
      
      this.button?.addEventListener('click', () => {
        this.toggleTheme();
      });

      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!this.getStoredTheme()) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }
  }

  // Initialize theme toggle when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeToggle();
  });
</script>
